from datetime import datetime
import random,time, math
from copy import deepcopy, copy
import decimal


class Board:
    def __init__(self, queen_count=8):
        self.queen_count = queen_count
        self.initial_queens = None  # Store the initial positions
        self.reset()

    def reset(self):
        self.queens = [-1 for i in range(0, self.queen_count)]
        for i in range(0, self.queen_count):
            self.queens[i] = random.randint(0, self.queen_count - 1)
        if self.initial_queens is None:
            self.initial_queens = self.queens.copy()  # Copy the initial positions

    def visualize(self):
        size = self.queen_count
        initial_board = [['.' for _ in range(size)] for _ in range(size)]
        final_board = [['.' for _ in range(size)] for _ in range(size)]

        # Populate the initial and final boards
        for row, col in enumerate(self.initial_queens):
            initial_board[row][col] = 'Q'
        for row, col in enumerate(self.queens):
            final_board[row][col] = 'Q'

        print("Initial Board:")
        for row in initial_board:
            print(" ".join(row))

        print("\nFinal Board:")
        for row in final_board:
            print(" ".join(row))

        print("\nNumber of attacks: ", self.calculateCost())

    def calculateCost(self):
        threat = 0

        for queen in range(0, self.queen_count):
            for next_queen in range(queen+1, self.queen_count):
                if self.queens[queen] == self.queens[next_queen] or abs(queen - next_queen) == abs(self.queens[queen] - self.queens[next_queen]):
                    threat += 1

        return threat

    def calculateCostWithQueens(queens):
        threat = 0
        queen_count = len(queens)

        for queen in range(0, queen_count):
            for next_queen in range(queen+1, queen_count):
                if queens[queen] == queens[next_queen] or abs(queen - next_queen) == abs(queens[queen] - queens[next_queen]):
                    threat += 1

        return threat

    def toString(queens):
        board_string = ""

        for row, col in enumerate(queens):
            board_string += "(%s, %s)\n" % (row, col)

        return board_string

    def __str__(self):
        board_string = ""

        for row, col in enumerate(self.queens):
            board_string += "(%s, %s)\n" % (row, col)

        return board_string

class SimulatedAnnealing:
    def __init__(self, board, param):
        self.elapsedTime = 0;
        self.board = board
        self.temperature = param['T']
        self.decay = param['decay']
        self.epochs = param['epochs']
        self.startTime = datetime.now()
 
 
    def run(self):
        board = self.board
        board_queens = self.board.queens[:]
        solutionFound = False
           
        
        for k in range(0, self.epochs):
            
            self.temperature *= self.decay
            next_queens = board_queens[:]
            i = random.randint(0, self.board.queen_count - 1)
            next_queens[i] = random.randint(0, self.board.queen_count - 1)
            
            
            dw = Board.calculateCostWithQueens(next_queens) - Board.calculateCostWithQueens(board_queens)
            
            try:
                prob = decimal.Decimal(math.exp(-dw/self.temperature))
            except OverflowError:
                prob = decimal.Decimal('0.0')
            if dw < 0 or random.uniform(0, 1) < prob:
                board_queens = next_queens[:] 
             
      
            if Board.calculateCostWithQueens(board_queens) == 0:
                self.elapsedTime = self.getElapsedTime()
                print("Success, Elapsed Time: %sms" % (str(self.elapsedTime)))
                solutionFound = True
                board.queens = board_queens[:]
                break
        
        if solutionFound == False:
            self.elapsedTime = self.getElapsedTime()
            print("Unsuccessful, Elapsed Time: %sms" % (str(self.elapsedTime)))
        
        return self.elapsedTime
 
    def getElapsedTime(self):
        endTime = datetime.now()
        elapsedTime = (endTime - self.startTime).microseconds / 1000
        return elapsedTime

if __name__ == '__main__':
    board = Board()
    param = {'T': 1000, 'decay': 0.90, 'epochs': 10000}
    sa = SimulatedAnnealing(board, param)
    elapsed_time = sa.run()
    board.visualize()  # This will print the board state after the algorithm ends, regardless of success
    print("Elapsed Time: %sms" % str(elapsed_time))

